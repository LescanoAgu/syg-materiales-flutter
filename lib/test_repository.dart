import 'features/stock/data/repositories/categoria_repository.dart';
import 'features/stock/data/models/categoria_model.dart';

/// Funci√≥n de prueba para el repositorio de categor√≠as
Future<void> testCategoriaRepository() async {
  print('\n========================================');
  print('üß™ PROBANDO CATEGORIA REPOSITORY');
  print('========================================\n');

  final CategoriaRepository repo = CategoriaRepository();

  // ========================================
  // 1. OBTENER TODAS LAS CATEGOR√çAS
  // ========================================
  print('1Ô∏è‚É£ Obteniendo todas las categor√≠as...');
  
  List<CategoriaModel> categorias = await repo.obtenerTodas();
  
  print('   ‚úì Total de categor√≠as: ${categorias.length}');
  print('   ‚úì Categor√≠as cargadas:');
  for (var cat in categorias) {
    print('      - [${cat.codigo}] ${cat.nombre}');
  }
  print('');

  // ========================================
  // 2. OBTENER POR ID
  // ========================================
  print('2Ô∏è‚É£ Obteniendo categor√≠a por ID...');
  
  CategoriaModel? categoria = await repo.obtenerPorId(1);
  
  if (categoria != null) {
    print('   ‚úì Encontrada: ${categoria.nombre}');
    print('      - C√≥digo: ${categoria.codigo}');
    print('      - Descripci√≥n: ${categoria.descripcion}');
  } else {
    print('   ‚úó No encontrada');
  }
  print('');

  // ========================================
  // 3. OBTENER POR C√ìDIGO
  // ========================================
  print('3Ô∏è‚É£ Obteniendo categor√≠a por c√≥digo...');
  
  CategoriaModel? categoriaOG = await repo.obtenerPorCodigo('OG');
  
  if (categoriaOG != null) {
    print('   ‚úì Encontrada: ${categoriaOG.nombre}');
  } else {
    print('   ‚úó No encontrada');
  }
  print('');

  // ========================================
  // 4. BUSCAR POR NOMBRE
  // ========================================
  print('4Ô∏è‚É£ Buscando categor√≠as por nombre...');
  
  List<CategoriaModel> resultados = await repo.buscarPorNombre('obra');
  
  print('   ‚úì Resultados para "obra": ${resultados.length}');
  for (var cat in resultados) {
    print('      - ${cat.nombre}');
  }
  print('');

  // ========================================
  // 5. CONTAR CATEGOR√çAS
  // ========================================
  print('5Ô∏è‚É£ Contando categor√≠as...');
  
  int total = await repo.contarTodas();
  
  print('   ‚úì Total: $total categor√≠as en la base de datos\n');

  // ========================================
  // 6. VERIFICAR SI EXISTE UN C√ìDIGO
  // ========================================
  print('6Ô∏è‚É£ Verificando si existen c√≥digos...');
  
  bool existeOG = await repo.existeCodigo('OG');
  bool existeXYZ = await repo.existeCodigo('XYZ');
  
  print('   ‚úì ¬øExiste c√≥digo "OG"?: $existeOG');
  print('   ‚úì ¬øExiste c√≥digo "XYZ"?: $existeXYZ\n');

  // ========================================
  // 7. CREAR NUEVA CATEGOR√çA (PRUEBA)
  // ========================================
  print('7Ô∏è‚É£ Creando una nueva categor√≠a de prueba...');
  
  CategoriaModel nuevaCategoria = CategoriaModel(
    codigo: 'TEST',
    nombre: 'Categor√≠a de Prueba',
    descripcion: 'Esta es una categor√≠a temporal para testing',
    orden: 99,
  );
  
  try {
    int nuevoId = await repo.crear(nuevaCategoria);
    print('   ‚úì Categor√≠a creada con id: $nuevoId\n');
    
    // ========================================
    // 8. ACTUALIZAR LA CATEGOR√çA CREADA
    // ========================================
    print('8Ô∏è‚É£ Actualizando la categor√≠a de prueba...');
    
    CategoriaModel paraActualizar = nuevaCategoria.copyWith(
      id: nuevoId,
      nombre: 'Categor√≠a Actualizada',
    );
    
    int filasAfectadas = await repo.actualizar(paraActualizar);
    print('   ‚úì Filas actualizadas: $filasAfectadas\n');
    
    // Verificar que se actualiz√≥
    CategoriaModel? verificar = await repo.obtenerPorId(nuevoId);
    if (verificar != null) {
      print('   ‚úì Verificaci√≥n: ${verificar.nombre}');
    }
    print('');
    
    // ========================================
    // 9. ELIMINAR LA CATEGOR√çA DE PRUEBA
    // ========================================
    print('9Ô∏è‚É£ Eliminando la categor√≠a de prueba...');
    
    int eliminadas = await repo.eliminar(nuevoId);
    print('   ‚úì Categor√≠as eliminadas: $eliminadas\n');
    
  } catch (e) {
    print('   ‚úó Error: $e\n');
  }

  // ========================================
  // 10. OBTENER LA √öLTIMA CATEGOR√çA
  // ========================================
  print('üîü Obteniendo la √∫ltima categor√≠a...');
  
  CategoriaModel? ultima = await repo.obtenerUltima();
  
  if (ultima != null) {
    print('   ‚úì √öltima categor√≠a: ${ultima.nombre}');
    print('      - Orden: ${ultima.orden}');
  }
  print('');

  print('========================================');
  print('‚úÖ PRUEBA COMPLETADA');
  print('========================================\n');
}